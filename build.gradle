buildscript {
  ext {
    springBootVersion = '2.1.0.M4'
    springCloudVersion = 'Finchley.RELEASE'
    javaVersion = JavaVersion.VERSION_1_8
    materialDesignIconsVersion = '3.0.1'
    materializecssVersion = '1.0.0'
    lombokVersion = '1.18.2'
    logbackVersion = '1.2.3'
    slf4jVersion = '1.7.25'
    vavrVersion = '0.9.2'

    phantomjsDriverVersion = '1.4.4'
    seleniumDriverVersion = '3.14.0'
    junitPlatformVersion = '1.3.0'
    junitJupiterVersion = '5.3.1'
    assertkJvmVersion = '0.12'
    selenideVersion = '4.14.2'
    assertjVersion = '3.11.0'
    jgivenVersion = '0.15.3'
    hamcrestVersion = '1.3'
    allureVersion = '2.6.0'
    junit4Version = '4.12'
  }

  repositories {
    //mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
  }

  dependencies {
    classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'
    classpath 'org.jruby:jruby-complete:9.1.13.0'
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }

  ext['selenium.version'] = "$seleniumDriverVersion"
}

plugins {
  //id 'com.gradle.build-scan' version '1.16'
  id 'org.asciidoctor.convert' version '1.5.8.1' apply false
  id 'org.ajoberstar.git-publish' version '0.3.0' apply false
  id 'io.spring.dependency-management' version '1.0.6.RELEASE' apply false
  id 'com.avast.gradle.docker-compose' version '0.7.1' apply false
  id 'io.franzbecker.gradle-lombok' version '1.14' apply false
}

wrapper {
  gradleVersion = '4.10.2'
  distributionType = 'BIN'
}

apply from: "$projectDir/gradle/repositories.gradle"

apply plugin: 'idea'

idea {
  module {
    downloadJavadoc = false
    downloadSources = true
  }
}

apply plugin: 'eclipse'

eclipse {
  classpath {
    downloadJavadoc = false
    downloadSources = true
  }
}

allprojects*.apply plugin: 'maven'

allprojects {
  apply plugin: 'base'

  clean.doFirst {
    [
        project.buildDir,
        project.file('out'),
        project.file('bin'),
        project.file('build'),
        project.file('public'),
    ].each { delete it }
  }
}

allprojects {
  apply plugin: 'java'

  apply plugin: 'io.franzbecker.gradle-lombok'
  lombok.version = project.lombokVersion

  version = '0.0.1'
  group = 'com.github.daggerok'
  sourceCompatibility = targetCompatibility = "$javaVersion"

  defaultTasks 'clean', 'build'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

compileJava.dependsOn(processResources)

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
    //mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
  }
}

bootJar {
  launchScript()
}

allprojects {
  // read more: https://docs.gradle.org/4.6/release-notes.html#junit-5-support

  dependencies {
    testImplementation "junit:junit:$junit4Version"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion", {
      because 'allows JUnit 3 and JUnit 4 tests to run'
    }
    testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVersion", {
      because 'allows tests to run from IDEs that bundle older version of launcher'
    }
    //testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
  }

  test {
    useJUnitPlatform {
      includeEngines 'junit-jupiter', 'junit-vintage'
    }
  }

  //apply from: "$project.rootDir/gradle/jgiven.gradle"
}

allprojects {
  apply plugin: 'findbugs'

  tasks.withType(FindBugs) {
    reports {
      xml.enabled false
      html.enabled true
      //// see for details/example: https://github.com/findbugsproject/findbugs/blob/master/findbugs/src/xsl/default.xsl
      //html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
    }
  }

  findbugs {
    reportsDir = file("$rootProject.buildDir/findbugs")
    ignoreFailures = true
  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'

  jacoco {
    toolVersion = '0.8.1'
  }

  jacocoTestCoverageVerification {
    violationRules {
      rule {
        limit {
          minimum = 0.5
        }
      }
      rule {
        enabled = false
        element = 'CLASS'
        includes = [
            'org.gradle.*',
        ]
        limit {
          counter = 'LINE'
          value = 'TOTALCOUNT'
          maximum = 0.3
        }
      }
    }
  }
}

subprojects {
  jacocoTestReport {
    def main = sourceSets.main
    def srcDirs = main.allSource.srcDirs
    additionalSourceDirs = files(srcDirs)
    sourceDirectories = files(srcDirs)
    classDirectories = files(main.output)
    reports {
      xml.enabled = false
      csv.enabled = false
      html.enabled = true
      html.destination file("$buildDir/jacoco/html")
    }
  }
}

jacocoTestReport {
  def main = subprojects.sourceSets.main
  def srcDirs = main.allSource.srcDirs
  dependsOn = subprojects.check
  additionalSourceDirs = files(srcDirs)
  sourceDirectories = files(srcDirs)
  classDirectories = files(main.output)
  executionData = files(subprojects.jacocoTestReport.executionData)
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(
          dir    : it,
          exclude: [
              '*donot/check/me*',
              '*dont/check/metoo*',
          ]
      )
    })
  }
  reports {
    xml.enabled = false
    csv.enabled = false
    html.enabled = true
    html.destination file("$rootProject.buildDir/jacoco/html")
  }
  onlyIf = {
    true
  }
  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
}

apply from: "$projectDir/gradle/docker-compose.gradle"
apply from: "$projectDir/gradle/docs.gradle"
//apply from: "$projectDir/gradle/build-scan.gradle"

dependencies {
  implementation 'org.springframework.data:spring-data-jdbc:1.0.0.r2dbc-SNAPSHOT'
  implementation 'io.r2dbc:r2dbc-postgresql:1.0.0.ISSUE-10-SNAPSHOT'
  //implementation 'org.postgresql:postgresql:42.2.1'
  //implementation 'io.r2dbc:r2dbc-spi:1.0.0.M5'
  //implementation 'io.r2dbc:r2dbc-postgresql:1.0.0.M5'
  //implementation 'io.r2dbc:r2dbc-client:1.0.0.M5'

  implementation "org.webjars:materializecss:$materializecssVersion"
  implementation "org.webjars:material-design-icons:$materialDesignIconsVersion"
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  runtime 'org.springframework.boot:spring-boot-devtools'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  testAnnotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'

  // In java we trust...
  implementation "io.vavr:vavr:$vavrVersion"
  //implementation "org.slf4j:slf4j-api:$slf4jVersion"
  //implementation "ch.qos.logback:logback-classic:$logbackVersion"
}